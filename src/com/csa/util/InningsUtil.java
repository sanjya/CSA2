package com.csa.util;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import com.csa.entity.Bowl;
import com.csa.entity.Innings;
import com.csa.entity.MatchDetails;
import com.csa.visualization.BattingSegment;
import com.csa.visualization.InningByInningsResults;
import com.csa.visualization.Partnership;

public class InningsUtil {

	public static InningByInningsResults generateInningsByInningsResultsFirstInnings(
			MatchDetails match) {

		InningByInningsResults inningsFactorSet = new InningByInningsResults();

		// inningsId will be autoGenerated

		inningsFactorSet.setMatchId(match.getMatchId());
		inningsFactorSet.setFirstInningsOrSecondInnings(1);

		ArrayList<BattingSegment> segmentList = getBattingSegmentList(match
				.getFirstInnings().getDeliveries());

		// set Final Socre of Innings
		inningsFactorSet.setFinalScore(getNumberOfRunsInInnings(match
				.getFirstInnings()));

		// set number Of Extras of Innings
		inningsFactorSet.setNumberOfExtras(getNumberOfExtras(match
				.getFirstInnings()));

		// set number of batting segments
		inningsFactorSet.setNumberOfBattingSegments(segmentList.size());

		// set avg mean runs in batting segment
		inningsFactorSet
				.setAvgMeanRunsInBattingSegment(getMeanRunsInSegment(segmentList));

		// set avg pressure factor
		inningsFactorSet
				.setAvgPressureFactor(getAvgPressureFactor(segmentList));

		// set dot bowl presentage
		inningsFactorSet.setDotBowlPrerentage(getDotBowlPresentage(match
				.getFirstInnings().getDeliveries()));

		// number of Wickets lost in first Innings
		inningsFactorSet.setNumberOfWicketsLost(match.getFirstInnings()
				.getNumberOfWickets());

		// sixHittingFrequency
		Double sixHittingFrequency = getInningsSixHittingFrequency(match
				.getFirstInnings().getDeliveries());
		inningsFactorSet.setSixHittingFrequency(sixHittingFrequency);

		// fourHittingFrequency
		Double fourHittingFrequency = getInningsFourHittingFrequency(match
				.getFirstInnings().getDeliveries());
		inningsFactorSet.setFourHittingFrequency(fourHittingFrequency);

		// Boundary Percentage
		Double boundrayPresentage = getBoundrayRunsPresentage(match
				.getFirstInnings().getDeliveries(), match.getFirstInnings()
				.getNumberOfRunsScored());
		inningsFactorSet.setBoundaryRunsPresentage(boundrayPresentage);

		// DotBawlToRunsRatio
		int numberOfDots = getNumberOfdots(match.getFirstInnings()
				.getDeliveries());
		int inningsScore = match.getFirstInnings().getNumberOfRunsScored();

		Double dotBowlToRunsRatio = getDotBowlToRunsRatio(numberOfDots,
				inningsScore);

		inningsFactorSet.setDotBowlToRunsRatio(dotBowlToRunsRatio);

		// set average partnership score
		Map<Integer, Partnership> partnershipList = getPartnershipList(match
				.getFirstInnings().getDeliveries());
		Double averagePartnershipScore = getAvgPartnershipScore(partnershipList);
		inningsFactorSet.setAvgPartnershipScore(averagePartnershipScore);

		// set batting segments to wickets ratio
		Double battingSegmentToWicketsRatio = getBattingSegmentsToWicketsRatio(
				segmentList, match.getFirstInnings().getNumberOfWickets());
		inningsFactorSet
				.setBattingSegmentsToWicketsRatio(battingSegmentToWicketsRatio);

		// set Pressure of loosing wickets
		inningsFactorSet.setPressureOfWickets(getPressureOfLoosingWickets(match
				.getFirstInnings().getDeliveries()));

		// for first innings
		int side = match.getResult().getWonByFirstBatOrSecondBat();
		// team 1 wins
		if (side == 1) {
			inningsFactorSet.setWinOrLoss("win");
		} else if (side == 2) {
			inningsFactorSet.setWinOrLoss("loss");
		} else {
			inningsFactorSet.setWinOrLoss("draw");
		}
		return inningsFactorSet;
	}

	public static InningByInningsResults generateInningsByInningsResultsSecondInnings(
			MatchDetails match) {

		InningByInningsResults inningsFactorSet = new InningByInningsResults();

		// inningsId will be autoGenerated

		inningsFactorSet.setMatchId(match.getMatchId());
		inningsFactorSet.setFirstInningsOrSecondInnings(2);

		// set Final Socre of Innings
		inningsFactorSet.setFinalScore(getNumberOfRunsInInnings(match
				.getSecondInnings()));

		// set number Of Extras of Innings
		inningsFactorSet.setNumberOfExtras(getNumberOfExtras(match
				.getSecondInnings()));

		/********************************* segment list **********************************/

		ArrayList<BattingSegment> segmentList = getBattingSegmentList(match
				.getSecondInnings().getDeliveries());

		// setNumber of segments
		inningsFactorSet.setNumberOfBattingSegments(segmentList.size());

		// set avgMean runs in batting segment
		inningsFactorSet
				.setAvgMeanRunsInBattingSegment(getMeanRunsInSegment(segmentList));

		// set avg pressure factor
		inningsFactorSet
				.setAvgPressureFactor(getAvgPressureFactor(segmentList));

		// set batting segments to wickets ratio
		Double battingSegmentToWicketsRatio = getBattingSegmentsToWicketsRatio(
				segmentList, match.getSecondInnings().getNumberOfWickets());
		inningsFactorSet
				.setBattingSegmentsToWicketsRatio(battingSegmentToWicketsRatio);

		/********************************* segment list **********************************/

		// dot bowl Percentage
		inningsFactorSet.setDotBowlPrerentage(getDotBowlPresentage(match
				.getSecondInnings().getDeliveries()));

		// numberOfWickets lost
		inningsFactorSet.setNumberOfWicketsLost(match.getSecondInnings()
				.getNumberOfWickets());

		// sixHittingFrequency
		Double sixHittingFrequency = getInningsSixHittingFrequency(match
				.getSecondInnings().getDeliveries());
		inningsFactorSet.setSixHittingFrequency(sixHittingFrequency);

		// fourHittingFrequency
		Double fourHittingFrequency = getInningsFourHittingFrequency(match
				.getSecondInnings().getDeliveries());
		inningsFactorSet.setFourHittingFrequency(fourHittingFrequency);

		// Boundary Percentage
		Double boundrayPresentage = getBoundrayRunsPresentage(match
				.getSecondInnings().getDeliveries(), match.getSecondInnings()
				.getNumberOfRunsScored());
		inningsFactorSet.setBoundaryRunsPresentage(boundrayPresentage);

		// DotBawlToRunsRatio
		int numberOfDots = getNumberOfdots(match.getSecondInnings()
				.getDeliveries());
		int inningsScore = match.getSecondInnings().getNumberOfRunsScored();

		// dot bowl To runs Ratio
		Double dotBowlToRunsRatio = getDotBowlToRunsRatio(numberOfDots,
				inningsScore);
		inningsFactorSet.setDotBowlToRunsRatio(dotBowlToRunsRatio);

		// set the win or loose
		int side = match.getResult().getWonByFirstBatOrSecondBat();

		// set average partnership score
		Map<Integer, Partnership> partnershipList = getPartnershipList(match
				.getSecondInnings().getDeliveries());
		Double averagePartnershipScore = getAvgPartnershipScore(partnershipList);
		inningsFactorSet.setAvgPartnershipScore(averagePartnershipScore);

		// set Pressure of loosing wickets
		inningsFactorSet.setPressureOfWickets(getPressureOfLoosingWickets(match
				.getSecondInnings().getDeliveries()));

		// team 1 wins
		if (side == 2) {
			inningsFactorSet.setWinOrLoss("win");
		} else if (side == 1) {
			inningsFactorSet.setWinOrLoss("loss");
		} else {
			inningsFactorSet.setWinOrLoss("draw");
		}
		return inningsFactorSet;
	}

	public static ArrayList<BattingSegment> getBattingSegmentList(
			Map<Integer, com.csa.entity.Bowl> deliveries) {

		ArrayList<BattingSegment> compressSet = new ArrayList<>();
		BattingSegment lastElement;
		for (int i = 1; i <= deliveries.size(); i++) {
			if (compressSet.size() != 0) {
				lastElement = compressSet.get(compressSet.size() - 1);
			} else {
				lastElement = new BattingSegment();
				lastElement.setBatsmansName("NO_BATSMAN");
			}

			Bowl bowl = deliveries.get(i);
			String batsman = bowl.getBatsman();

			if (lastElement.getBatsmansName().equals(batsman)) {
				// doNothing
				int currentRunsInTheSegment = lastElement
						.getNumberOfRunsScoredInSegment();
				int currentNumberOfExtrasInSegment = lastElement
						.getNumberOfExtras();
				int currentNumberOfDots = lastElement.getNumberOfDotBowls();
				int currentNumberOfBowls = lastElement.getNumberOfBowls();

				lastElement
						.setNumberOfRunsScoredInSegment(currentRunsInTheSegment
								+ bowl.getRuns());
				lastElement.setNumberOfExtras(currentNumberOfExtrasInSegment
						+ bowl.getExtras());

				if (bowl.getTotalRuns() == 0) {
					lastElement.setNumberOfDotBowls(currentNumberOfDots + 1);
				}
				// this need to be change after find out about type of extras
				lastElement.setNumberOfDotBowls(currentNumberOfBowls + 1);
			} else {
				// create new batting segment
				BattingSegment segment = new BattingSegment();
				segment.setBatsmansName(batsman);
				segment.setNumberOfRunsScoredInSegment(bowl.getRuns());
				segment.setNumberOfExtras(bowl.getExtras());

				if (bowl.getTotalRuns() == 0) {
					segment.setNumberOfDotBowls(1);
				}
				// this need to be change with the extra type
				segment.setNumberOfBowls(1);
				compressSet.add(segment);
			}
		}
		return compressSet;
	}

	public static Double getMeanRunsInSegment(
			ArrayList<BattingSegment> segmentList) {

		Double meanRunsInASegment = 0.0;
		Double avgMeanRunsInASegment = 0.0;
		for (BattingSegment segment : segmentList) {
			int totalRunsInSegment = segment.getNumberOfRunsScoredInSegment();
			int totalBowlsFaceInASegment = segment.getNumberOfBowls();
			meanRunsInASegment = meanRunsInASegment
					+ (totalRunsInSegment / totalBowlsFaceInASegment);
		}
		avgMeanRunsInASegment = meanRunsInASegment / segmentList.size();
		return avgMeanRunsInASegment;
	}

	public static Double getAvgRunsInSegment(
			ArrayList<BattingSegment> segmentList) {

		Double averageRunsInBattingSegment = 0.0;
		int totalRunsInSegment = 0;
		for (BattingSegment segment : segmentList) {
			totalRunsInSegment = totalRunsInSegment
					+ segment.getNumberOfRunsScoredInSegment();
		}

		averageRunsInBattingSegment = totalRunsInSegment
				/ (segmentList.size() + 0.0);

		return averageRunsInBattingSegment;
	}

	public static Double getAvgPressureFactor(
			ArrayList<BattingSegment> segmentList) {

		Double sumofPressreFactor = 0.0;
		Double avgMeanRunsInASegment = 0.0;
		for (BattingSegment segment : segmentList) {
			int totalRunsInSegment = segment.getNumberOfRunsScoredInSegment();
			int totalDotFaceInASegment = segment.getNumberOfDotBowls();
			sumofPressreFactor = sumofPressreFactor + totalRunsInSegment
					/ (totalDotFaceInASegment + 1);
		}
		avgMeanRunsInASegment = sumofPressreFactor / segmentList.size();

		return avgMeanRunsInASegment;
	}

	public static Double getDotBowlPresentage(
			Map<Integer, com.csa.entity.Bowl> deliveries) {
		int numberOfDotBowls = 0;
		Double dotBowlPresentage = 0.0;
		for (int i = 1; i <= deliveries.size(); i++) {
			Bowl bowl = deliveries.get(i);
			if (bowl.getTotalRuns() == 0) {
				numberOfDotBowls++;
			}
		}
		dotBowlPresentage = numberOfDotBowls * (100.0) / deliveries.size();
		return dotBowlPresentage;
	}

	public static int getNumberOfdots(
			Map<Integer, com.csa.entity.Bowl> deliveries) {
		int numberOfDotBowls = 0;
		for (int i = 1; i <= deliveries.size(); i++) {
			Bowl bowl = deliveries.get(i);
			if (bowl.getTotalRuns() == 0) {
				numberOfDotBowls++;
			}
		}
		return numberOfDotBowls;
	}

	public static Double getInningsSixHittingFrequency(
			Map<Integer, com.csa.entity.Bowl> deliveries) {
		int numberOfsixes = 0;
		Double sixesPresentage = 0.0;
		for (int i = 1; i <= deliveries.size(); i++) {
			Bowl bowl = deliveries.get(i);
			if (bowl.getRuns() == 6) {
				numberOfsixes++;
			}
		}
		sixesPresentage = numberOfsixes * (100.0) / (deliveries.size() + 0.0);
		return sixesPresentage;
	}

	public static Double getInningsFourHittingFrequency(
			Map<Integer, com.csa.entity.Bowl> deliveries) {
		int numberOfFours = 0;
		Double foursPresentage = 0.0;
		for (int i = 1; i <= deliveries.size(); i++) {
			Bowl bowl = deliveries.get(i);
			if (bowl.getRuns() == 4) {
				numberOfFours++;
			}
		}
		foursPresentage = numberOfFours * (100.0) / (deliveries.size() + 0.0);
		return foursPresentage;
	}

	public static Double getBoundrayRunsPresentage(
			Map<Integer, com.csa.entity.Bowl> deliveries, int totalNumberOfRuns) {
		int runsFromFours = 0;
		int runsFromSixes = 0;
		Double boundryRunsPresentage = 0.0;
		for (int i = 1; i <= deliveries.size(); i++) {
			Bowl bowl = deliveries.get(i);
			if (bowl.getRuns() == 4) {
				runsFromFours = runsFromFours + 4;
			} else if (bowl.getRuns() == 4) {
				runsFromSixes = runsFromSixes + 6;
			}
		}
		boundryRunsPresentage = ((runsFromSixes + runsFromFours) * (100.0))
				/ totalNumberOfRuns;
		return boundryRunsPresentage;
	}

	public static Double getDotBowlToRunsRatio(int numberOfDots,
			int numberOfRuns) {
		Double dotBowlToRunsRatio = numberOfDots / (numberOfRuns + 0.0);
		return dotBowlToRunsRatio;
	}

	public static Map<Integer, Partnership> getPartnershipList(
			Map<Integer, Bowl> deliveries) {

		Map<Integer, Partnership> partnershipList = new HashMap<Integer, Partnership>();

		int partnershipNumber = 0;
		int numberOfbowls = 0;
		int score = 0;
		Bowl bowl;
		String bat1name = null;
		String bat2name = null;

		String currentStriker;
		String currentNonStriker;
		for (int i = 1; i <= deliveries.size(); i++) {

			// first bowl
			bowl = deliveries.get(i);

			currentStriker = bowl.getBatsman();
			currentNonStriker = bowl.getNonStriker();

			if (i == 1) {
				bat1name = bowl.getBatsman();
				bat2name = bowl.getNonStriker();
			}
			// if striker or non striker changed
			if ((currentStriker.equals(bat1name) || currentStriker
					.equals(bat2name))
					&& (currentNonStriker.equals(bat1name) || currentNonStriker
							.equals(bat2name))) {
				numberOfbowls = numberOfbowls + 1;
				score = score + bowl.getTotalRuns();

			} else {
				// wicket is gone or some one out of the field due to an injury
				Bowl prevBowl = deliveries.get(i - 1);
				int partnershipRuns = score - prevBowl.getRuns();
				int partnershipBowls = numberOfbowls - 1;

				Partnership partnership = new Partnership();
				partnership.setBatsman1(bat1name);
				partnership.setBatsman2(bat2name);

				partnership.setBowlsFaced(partnershipBowls);
				partnership.setPartnershipScore(partnershipRuns);

				partnershipNumber++;

				score = bowl.getTotalRuns();
				numberOfbowls = 1;
				bat1name = bowl.getBatsman();
				bat2name = bowl.getNonStriker();

				partnershipList.put(partnershipNumber, partnership);
			}
			// if bowl is the last bowl of the innings
			if (i == deliveries.size()) {

				Partnership partnership = new Partnership();
				partnership.setBatsman1(bat1name);
				partnership.setBatsman2(bat2name);

				partnership.setBowlsFaced(score);
				partnership.setPartnershipScore(numberOfbowls);

				partnershipList.put((partnershipNumber + 1), partnership);
			}
		}
		return partnershipList;
	}

	public static Double getAvgPartnershipScore(
			Map<Integer, Partnership> partnershipList) {
		Double average = 0.0;
		int totalRuns = 0;

		for (int i = 1; i <= partnershipList.size(); i++) {
			totalRuns = totalRuns
					+ partnershipList.get(i).getPartnershipScore();
		}
		average = totalRuns / (partnershipList.size() + 0.0);
		return average;
	}

	public static Double getBattingSegmentsToWicketsRatio(
			ArrayList<BattingSegment> segmentList, int numberOfWickets) {
		Double ratio = segmentList.size() / (numberOfWickets + 1.0);
		return ratio;
	}

	public static Double getPressureOfLoosingWickets(
			Map<Integer, Bowl> deliveries) {

		ArrayList<Integer> wicketBowls = new ArrayList<>();

		// add wicket bowl numbers to array List
		for (int i = 1; i <= deliveries.size(); i++) {
			Bowl bowl = deliveries.get(i);

			if (bowl.getIsWicket() == 1) {
				int bowlNumber = bowl.getBowlnumber();
				wicketBowls.add(bowlNumber);
			}
		}
		Double pressureOfLoosingWickets = 0.0;

		for (int i = 0; i < wicketBowls.size(); i++) {

			Double factor = 0.0;
			for (int j = i - 1; j >= 0; j--) {
				int wicketNumber = j + 1;
				int bowlGap = wicketBowls.get(i) - wicketBowls.get(j);

				// factor = 0.0 + factor + ((wicketNumber)*(bowlGap + 0.0));
				factor = factor + bowlGap;
			}

			pressureOfLoosingWickets = pressureOfLoosingWickets + factor;
		}
		return pressureOfLoosingWickets;
	}

	public static int getNumberOfRunsInInnings(Innings innings) {

		Map<Integer, Bowl> deliveries = innings.getDeliveries();
		int numberOfRuns = 0;
		for (int i = 1; i <= deliveries.size(); i++) {
			numberOfRuns = numberOfRuns + deliveries.get(i).getTotalRuns();
		}
		return numberOfRuns;
	}

	public static int getNumberOfExtras(Innings innings) {

		Map<Integer, Bowl> deliveries = innings.getDeliveries();
		int numberOfExtras = 0;
		for (int i = 1; i <= deliveries.size(); i++) {
			numberOfExtras = numberOfExtras + deliveries.get(i).getExtras();
		}
		return numberOfExtras;
	}
}